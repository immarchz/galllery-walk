generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int? 
  refreshTokenExpiresIn Int? @map("refresh_token_expires_in")
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade,onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade,onUpdate: Cascade)

  @@map("sessions")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  hosts Event[]
  transactions Transaction[]

  @@map("users")
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  display_image String
  title String 
  description String
  event_start DateTime 
  event_end DateTime 
  organizer String 
  money Int 
  host_id       String   @map("host_id") @db.ObjectId 
  user User @relation(fields: [host_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  last_participant String? 
  participants String[] @db.ObjectId @default([])
  projects Project[]

  @@map("events")
}

model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  eventId String @map("event_id") @db.ObjectId 
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title String
  abstract String
  members String[] @db.ObjectId
  likes String[] @db.ObjectId
  money Int
  transactions Transaction[]

  @@map("projects")
}


model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  projectId String @db.ObjectId
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amount Int

  @@map("transactions")
}





